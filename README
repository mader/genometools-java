This directory contains the source code for the GenomeTools Java bindings.

Copyright (c) 2009-2013 Philipp L. Carpus, Malte Mader, and Sascha Steinbiss
Copyright (c) 2009-2013 Center for Bioinformatics, University of Hamburg

The GenomeTools genome analysis system (http://www.genometools.org) is a
collection of bioinformatics tools (in the realm of genome informatics).
This library makes some of the functionality of the GenomeTools available
to Java programs.

lib/                   JNA and JUnit libraries, needed for the unit tests
src/                   Java source code
src/annotationsketch/  Java source code for AnnotationSketch
src/com/               Java source code extending com.sun.jna.* JNA base classes
src/core/              Java source code for the ``core'' part
src/gtnative/          Java source code with native interface
src/extended/          Java source code for the ``extended'' part
src/ltr/               Java source code for the ``ltr'' part
test/                  JUnit unit tests and test data

REQUIREMENTS
------------
- a recent Java runtime(this code was tested using the Sun JRE 1.6).
- GenomeTools shared objects (e.g. libgenometools.{so,dylib} and
  libgtunstable.{so,dylib}) must be accessible to the dynamic loader.
  For example, this can be done using ``make install'' in the GenomeTools
  source directory to install it into a system-wide location or
  by setting the LD_LIBRARY_PATH environment variable to point to the location
  of these libraries.
- all GenomeTools requirements, e.g. cairo (http://cairographics.org) for
  AnnotationSketch.
- the Java Native Access (JNA, https://jna.dev.java.net) jarfile in the
  classpath (3.2.5 or later).
- the ``ant'' tool to compile the source and the junit optional package
  for ant to run the unit tests

GENOMETOOLS BUILD OPTIONS
-------------------------
The Java bindings only act as a wrapper and call native code from the
GenomeTools libraries (see above).
To ensure compatibility, please make sure you are using the latest GenomeTools
version (1.3.5 or later). Also, one may also want to compile a thread-safe
version of GenomeTools (use the ``threads=yes'' make options).
To use the protein domain search functionality in the LTRdigestStream, the
GenomeTools libraries must also be built with the ``with-hmmer=yes'' make
option.

BUILDING THE JAVA BINDINGS
--------------------------
In the root directory of source tree, run

  ``ant'' or
  ``ant compile''      to compile the code
  ``ant test''         to run the unit tests
  ``ant test-ltr''     to run additional unit tests (requires HMMER support in
                       the local GenomeTools library, see above)
  ``ant jar''          to build a JAR-file containing the classfiles
  ``ant clean''        to remove all compiled binaries.

CONTACT
-------
For further questions about the GenomeTools Java bindings, please contact
Sascha Steinbiss (steinbiss@zbh.uni-hamburg.de). For questions about GenomeTools
in general, please refer to the mailing list (gt-users@genometools.org).
